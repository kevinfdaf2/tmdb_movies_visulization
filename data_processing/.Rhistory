names(movies)
# Load packages
library(ggplot2) # visualization
library(ggrepel)
source('~/Desktop/FIT5147/Visulization Project/data/visual.R', echo=TRUE)
library(ggrepel)
names(movies)
names(movie)
movie %>% filter(periodes = '10-80')
movie %>% filter(periodes == '10-80')
1080 <- movie %>% filter(periodes == '10-80')
data1080 <- movie %>% filter(periodes == '10-80')
View(data1080)
View(data1080)
summmary(data1080)
summary(data1080)
sum(data1080)
sum(data1080[2:6,])
data1080[c(4:10), ]
data1080[,c(4:10),]
data1080[,c(10:15),]
names(data1080[,c(10:15),])
names(data1080[,c(13:15),])
names(data1080[,c(13:19),])
names(data1080[,c(17:19),])
names(data1080[,c(18:19),])
names(data1080[,c(18:39),])
names(data1080[,c(18:36),])
names(data1080[,c(18:35),])
names(data1080[,c(18:36),])
names(data1080[,c(18:35),])
sum(data1080[,c(18:35),])
apply(data1080[,c(18:35),],sum())
apply(data1080[,c(18:35),],sum
apply(data1080[,c(18:35),],sum
(data1080[,c(18:35),])
sum(data1080[,c(18:35),])
table(sum(data1080[,c(18:35),]))
colSums(data1080[,c(18:35),]))
colSums(data1080[,c(18:35),])
data1080 <- movie %>% filter(periodes == '10-80')
data1080 <- movie %>% filter(periodes == '10-80')colSums(data1080[,c(18:35),])
data1080 <- movie %>% filter(periodes == '10-80')
data1080 <- movie %>% filter(periodes == '10-80')
data1080 <- movie %>% filter(periodes == '10-80')colSums(data1080[,c(18:35),])
data1080 <- movie %>% filter(periodes == '10-80')
data1080 <- movie %>% filter(periodes == '10-80')
data8090 <- movie %>% filter(periodes == '80-90')
data9000 <- movie %>% filter(periodes == '90-00')
data0010 <- movie %>% filter(periodes == '00-10')
data1017 <- movie %>% filter(periodes == '10-17')
colSums(data1080[,c(18:35),])
colSums(data1080[,c(18:35),])
colSums(data1080[,c(18:35),])
colSums(data1080[,c(18:35),])
colSums(data8090[,c(18:35),])
colSums(data8090[,c(18:35),])
colSums(data9000[,c(18:35),])
colSums(data0010[,c(18:35),])
colSums(data1017[,c(18:35),])
movie[order(movie$budget,decreasing=TRUE)[1:10]]
movie[,order(movie$budget,decreasing=TRUE)[1:10]]
movie[order(movie$budget,decreasing=TRUE)[1:10],]
budgetrank <- movie[order(movie$budget,decreasing=TRUE)[1:10],]
popularityrank <- movie[order(movie$popularity,decreasing=TRUE)[1:10],]
runtimerank <- movie[order(movie$runtime,decreasing=TRUE)[1:10],]
revenuerank <- movie[order(movie$revenue,decreasing=TRUE)[1:10],]
View(budgetrank)
View(budgetrank)
View(budgetrank)
View(budgetrank)
library(caret)
library(car)
library(visdat)
# read data
movie <- read.csv('movie_final.csv')
# create a column to store periode and set the defual value to 0s
movie$periodes <- rep(0)
# change all value to date type
movie$release_date <- as.Date(movie$release_date)
range(movie$release_date)
# give the periods values
movie[which(movie$release_date >= as.Date('1910-01-01') & movie$release_date < as.Date('1979-12-31')),]$periodes = 'data1080'
movie[which(movie$release_date >= as.Date('1980-01-01') & movie$release_date < as.Date('1989-12-31')),]$periodes = 'data8090'
movie[which(movie$release_date >= as.Date('1990-01-01') & movie$release_date < as.Date('2099-12-31')),]$periodes = 'data9000'
movie[which(movie$release_date >= as.Date('2000-01-01') & movie$release_date < as.Date('2009-12-31')),]$periodes = 'data0010'
movie[which(movie$release_date >= as.Date('2010-01-01') & movie$release_date < as.Date('2017-06-01')),]$periodes = 'data1017'
# check the unique values
unique(movie$periodes)
top_pop_peri <- data_frame()
# get the top popularity film of each period
for (i in unique(movie$periodes)){
print(i)
top_pop_peri <- rbind(top_pop_peri, movie[movie$popularity == max(movie[which(movie$periodes == i),]$popularity),])
}
movie %>%
group_by(periodes) %>%
sum(movie$History)
names(movie)
movie[c(2:37),]
names(movie[c(2:37),])
names(movie[c(3:37),])
names(movie[,c(1:37)])
names(movie[,c(1:40)])
names(movie[,c(1:39)])
names(movie[,c(2:39)])
names(movie[,c(2:4,4:39)])
names(movie[,c(2:4,5:39)])
names(movie[,c(2:3,5:39)])
names(movie[,c(2:3,5:14,39)])
names(movie[,c(2:3,5:12,39)])
names(movie[,c(2:3,5:13,39)])
names(movie[,c(2:3,5:13,14:39)])
names(movie[,c(2:3,5:13,15:39)])
names(movie[,c(2:3,5:13,15:39)])
names(movie[,c(2:3,5:13,15:17,39)])
names(movie[,c(2:3,5:13,15:17,36:39)])
names(movie[,c(2:3,5:13,15:17,35:39)])
names(movie[,c(2:3,5:13,15:17,36:39)])
names(movie[,c(2:3,5:13,15:17,36:39)])
movierank <- names(movie[,c(2:3,5:13,15:17,36:39)])
movierank <- movie[,c(2:3,5:13,15:17,36:39)]
View(movierank)
movierank <- movie[,c(2:3,5:13,15:17,36:37, 39)]
write.csv(movierank,"movierank.csv")
View(movie)
View(movierank)
class(movierank$popularity)
View(movierank)
View(data1080)
View(data1080)
View(movierank)
View(movierank)
names(movierank)
names(movierank[c(1:12)])
names(movierank[c(1:19)])
names(movierank[c(1:18)])
names(movierank[c(1:17)])
names(movierank[c(1:17),])
names(movierank[c(1:19),])
names(movierank[,c(1:17)])
names(movierank[,c(1:18)])
7
names(movierank[,c(1:17)])
names(movierank[,c(1:12,17)])
names(movierank[,c(1:3,17)])
names(movierank[,c(1:3,5:17)])
names(movierank[,c(1:3,5:13, 17)])
names(movierank[,c(1:3,5:13, 14:17)])
names(movierank[,c(1:3,5:13, 15:17)])
names(movierank[,c(1:3,5:13, 15:16)])
names(movierank[c(1:300),c(1:3,5:13, 15:16)])
length(movierank[c(1:300),c(1:3,5:13, 15:16)])
length(movierank[c(1:300),c(1:3,5:13, 15:16)])
movierank[c(1:300),c(1:3,5:13, 15:16)])
movierank[c(1:300),c(1:3,5:13, 15:16)]
data <- movierank[c(1:300),c(1:3,5:13, 15:16)]
View(data)
data <- movierank[c(1:300),c(1:3,5:13, 15:16)]
write.csv(movierank,"scatter.csv")
write.csv(data,"scatter.csv")
movierank <- movie[,c(2:3,5:13,15:17,36:37, 39)]
class(movierank$popularity)
write.csv(movierank,"movierank.csv")
data <- movierank[c(1:300),c(1:3,5:13, 15:16)]
library(ggthemes) # visualization
library(scales) # visualization
library(dplyr) # data manipulation
library(VIM)
library(data.table)
library(formattable)
library(corrplot)
library(GGally)
library(caret)
library(car)
library(visdat)
# read data
movie <- read.csv('movie_final.csv')
# create a column to store periode and set the defual value to 0s
movie$periodes <- rep(0)
# change all value to date type
movie$release_date <- as.Date(movie$release_date)
range(movie$release_date)
# give the periods values
movie[which(movie$release_date >= as.Date('1910-01-01') & movie$release_date < as.Date('1979-12-31')),]$periodes = 'data1080'
movie[which(movie$release_date >= as.Date('1980-01-01') & movie$release_date < as.Date('1989-12-31')),]$periodes = 'data8090'
movie[which(movie$release_date >= as.Date('1990-01-01') & movie$release_date < as.Date('2099-12-31')),]$periodes = 'data9000'
movie[which(movie$release_date >= as.Date('2000-01-01') & movie$release_date < as.Date('2009-12-31')),]$periodes = 'data0010'
movie[which(movie$release_date >= as.Date('2010-01-01') & movie$release_date < as.Date('2017-06-01')),]$periodes = 'data1017'
# check the unique values
unique(movie$periodes)
# change all value to date type
movie$release_date <- as.Date(movie$release_date)
range(movie$release_date)
# give the periods values
movie[which(movie$release_date >= as.Date('1910-01-01') & movie$release_date < as.Date('1979-12-31')),]$periodes = '1910-1980'
movie[which(movie$release_date >= as.Date('1980-01-01') & movie$release_date < as.Date('1989-12-31')),]$periodes = '1980-1990'
movie[which(movie$release_date >= as.Date('1990-01-01') & movie$release_date < as.Date('2099-12-31')),]$periodes = '1990-2000'
movie[which(movie$release_date >= as.Date('2000-01-01') & movie$release_date < as.Date('2009-12-31')),]$periodes = '2000-2010'
movie[which(movie$release_date >= as.Date('2010-01-01') & movie$release_date < as.Date('2017-06-01')),]$periodes = '2010-2017'
# check the unique values
unique(movie$periodes)
top_pop_peri <- data_frame()
top_pop_peri <- data_frame()
# get the top popularity film of each period
for (i in unique(movie$periodes)){
print(i)
top_pop_peri <- rbind(top_pop_peri, movie[movie$popularity == max(movie[which(movie$periodes == i),]$popularity),])
}
movie %>%
group_by(periodes) %>%
sum(movie$History)
names(movie)
movierank <- movie[,c(2:3,5:13,15:17,36:37, 39)]
class(movierank$popularity)
write.csv(movierank,"movierank.csv")
movierank$budget
movierank$budget/1000000
movierank$budget/1000000000
range(movierank$budget)
movierank$budget/1000000
class(movierank$popularity)
movierank$budget/1000000
movierank$revenue/1000000
movierank$budget <- movierank$budget/1000000
movierank$revenue <- movierank$revenue/1000000
View(movierank)
class(movierank$popularity)
write.csv(movierank,"movierank.csv")
names(movierank)
names(movierank)[1]
names(movierank)[9]
names(movierank)[]10
names(movierank)[10]
names(movierank)[10] <- `runtime(min)`
names(movierank)
names(movierank)[1] <-"budget(million)"
names(movierank)[1] <-"budget(million)"
names(movierank)[1] <-"budget(million)"
names(movierank)[9] <-"revenue(million)"
names(movierank)[10] <- "runtime(min)"
names(movierank)
data <- movierank[c(1:300),c(1:3,5:13, 15:16)]
class(movierank$popularity)
write.csv(movierank,"movierank.csv")
View(top_pop_peri)
View(top_pop_peri)
View(top_pop_peri)
View(top_pop_peri)
View(top_pop_peri)
top_pop_peri$cast
data <- movierank[c(1:300),c(1:3,5:13, 15:16)]
top_pop_peri$homepage
top_pop_peri[1,]
data[order(data$popularity)]
data[order(data$popularity),]
names(data[order(data$popularity),])
length(data[order(data$popularity),])
nrow(data[order(data$popularity),])
data <- movierank[,c(1:3,5:13, 15:16)]
View(data)
View(data)
data <- nrow(data[order(data$popularity),])
data <- data[order(data$popularity),]
data <- movierank[,c(1:3,5:13, 15:16)]
data <- data[order(data$popularity),]
View(data)
data <- movierank[,c(1:3,5:13, 15:16)]
data <- data[order(-data$popularity),]
data <- data[order(-data$`popularity`budget(million)`),]
data <- data[order(-data$`budget(million)`),]
data <- movierank[,c(1:3,5:13, 15:16)]
data <- data[order(-data$`budget(million)`),]
data <- data[c(1:300),]
data %>% lm(budget ~ popularity)
data %>% plot(`budget(million)`, popularity)
data %>% ggplot(`budget(million)`, popularity)
data %>% lm(`budget(million)`~ popularity)
plot(data$`budget(million)`~ data$popularity)
lm(data$`budget(million)`~ data$popularity)
plot(lm(data$`budget(million)`~ data$popularity))
plot(data$`budget(million)`~ data$popularity)
plot(data$popularity, data$`budget(million)`)
plot(data$popularity, data$`budget(million)`)
plot( data$`budget(million)`,data$popularity)
plot(lm(data$`budget(million)`~ data$popularity))
lm(data$`budget(million)`~ data$popularity)
plot( data$`budget(million)`,data$popularity)
lm(data$`budget(million)`~ data$popularity)
perdict(bp, 0)
bp <- lm(data$`budget(million)`~ data$popularity)
perdict(bp, 0)
View(budgetrank)
View(bp)
View(bp)
perdict(bp, data.frame(x = 0))
predict(bp, data.frame(x = 0))
predict(bp, data$popularity)
predict(bp, data$`budget(million)`)
predict(bp, data.frame(data$`budget(million)`))
bp <- lm(data$`budget(million)`~ data$popularity)
bp <- lm(data$`budget(million)`~ data$popularity)
br <- lm(data$`budget(million)`~ data$`revenue(million)`)
brun <- lm(data$`budget(million)`~ data$`runtime(min)`)
bp
br
brun
data <- data[c(1:300),]
write.csv(data,"scatter.csv")
View(data)
View(data)
write.csv(data,"scatter.csv")
# read data
movie <- read.csv('movie_final.csv')
# create a column to store periode and set the defual value to 0s
movie$periodes <- rep(0)
# change all value to date type
movie$release_date <- as.Date(movie$release_date)
range(movie$release_date)
# give the periods values
movie[which(movie$release_date >= as.Date('1910-01-01') & movie$release_date < as.Date('1979-12-31')),]$periodes = '1910-1980'
movie[which(movie$release_date >= as.Date('1980-01-01') & movie$release_date < as.Date('1989-12-31')),]$periodes = '1980-1990'
movie[which(movie$release_date >= as.Date('1990-01-01') & movie$release_date < as.Date('2099-12-31')),]$periodes = '1990-2000'
movie[which(movie$release_date >= as.Date('2000-01-01') & movie$release_date < as.Date('2009-12-31')),]$periodes = '2000-2010'
movie[which(movie$release_date >= as.Date('2010-01-01') & movie$release_date < as.Date('2017-06-01')),]$periodes = '2010-2017'
# check the unique values
unique(movie$periodes)
top_pop_peri <- data_frame()
# get the top popularity film of each period
for (i in unique(movie$periodes)){
print(i)
top_pop_peri <- rbind(top_pop_peri, movie[movie$popularity == max(movie[which(movie$periodes == i),]$popularity),])
}
movie %>%
group_by(periodes) %>%
sum(movie$History)
names(movie)
data1080 <- movie %>% filter(periodes == '10-80')
data8090 <- movie %>% filter(periodes == '80-90')
data9000 <- movie %>% filter(periodes == '90-00')
data0010 <- movie %>% filter(periodes == '00-10')
data1017 <- movie %>% filter(periodes == '10-17')
colSums(data1080[,c(18:35),])
colSums(data8090[,c(18:35),])
colSums(data9000[,c(18:35),])
colSums(data0010[,c(18:35),])
colSums(data1017[,c(18:35),])
movierank <- movie[,c(2:3,5:13,15:17,36:37, 39)]
movierank$budget <- movierank$budget/1000000
write.csv(movierank,"movierank.csv")
data <- movierank[,c(1:3,5:13, 15:16)]
data <- data[order(-data$budget),]
data <- data[c(1:300),]
write.csv(data,"scatter.csv")
View(data)
View(data)
View(data)
View(data)
movierank$revenue <- movierank$revenue/1000000
# Load packages
library(ggplot2) # visualization
library(ggrepel)
library(ggthemes) # visualization
library(scales) # visualization
library(dplyr) # data manipulation
library(VIM)
library(data.table)
library(formattable)
library(corrplot)
library(GGally)
library(caret)
library(car)
library(visdat)
# read data
movie <- read.csv('movie_final.csv')
# create a column to store periode and set the defual value to 0s
movie$periodes <- rep(0)
# change all value to date type
movie$release_date <- as.Date(movie$release_date)
range(movie$release_date)
# give the periods values
movie[which(movie$release_date >= as.Date('1910-01-01') & movie$release_date < as.Date('1979-12-31')),]$periodes = '1910-1980'
movie[which(movie$release_date >= as.Date('1980-01-01') & movie$release_date < as.Date('1989-12-31')),]$periodes = '1980-1990'
movie[which(movie$release_date >= as.Date('1990-01-01') & movie$release_date < as.Date('2099-12-31')),]$periodes = '1990-2000'
movie[which(movie$release_date >= as.Date('2000-01-01') & movie$release_date < as.Date('2009-12-31')),]$periodes = '2000-2010'
movie[which(movie$release_date >= as.Date('2010-01-01') & movie$release_date < as.Date('2017-06-01')),]$periodes = '2010-2017'
# check the unique values
unique(movie$periodes)
top_pop_peri <- data_frame()
# get the top popularity film of each period
for (i in unique(movie$periodes)){
print(i)
top_pop_peri <- rbind(top_pop_peri, movie[movie$popularity == max(movie[which(movie$periodes == i),]$popularity),])
}
movie %>%
group_by(periodes) %>%
sum(movie$History)
names(movie)
data1080 <- movie %>% filter(periodes == '10-80')
data8090 <- movie %>% filter(periodes == '80-90')
data9000 <- movie %>% filter(periodes == '90-00')
data0010 <- movie %>% filter(periodes == '00-10')
data1017 <- movie %>% filter(periodes == '10-17')
colSums(data1080[,c(18:35),])
colSums(data8090[,c(18:35),])
colSums(data9000[,c(18:35),])
colSums(data0010[,c(18:35),])
colSums(data1017[,c(18:35),])
movierank <- movie[,c(2:3,5:13,15:17,36:37, 39)]
movierank$budget <- movierank$budget/1000000
movierank$revenue <- movierank$revenue/1000000
#names(movierank)[1] <-"budget(million)"
#names(movierank)[9] <-"revenue(million)"
#names(movierank)[10] <- "runtime(min)"
names(movierank)
class(movierank$popularity)
write.csv(movierank,"movierank.csv")
top_pop_peri[1,]
data <- movierank[,c(1:3,5:13, 15:16)]
data <- data[order(-data$budget),]
data <- data[c(1:300),]
write.csv(data,"scatter.csv")
plot( data$budget,data$popularity)
bp <- lm(data$budget~ data$popularity)
br <- lm(data$budget~ data$revenue)
brun <- lm(data$budget~ data$runtime)
bp
br
brun
plot( data$budget,data$revenue)
plot(br)
plot( data$budget,data$revenue)
# Load packages
library(ggplot2) # visualization
library(ggrepel)
library(ggthemes) # visualization
library(scales) # visualization
library(dplyr) # data manipulation
library(VIM)
library(car)
library(visdat)
# read data
movie <- read.csv('movie_final.csv')
# create a column to store periode and set the defual value to 0s
movie$periodes <- rep(0)
# change all value to date type
movie$release_date <- as.Date(movie$release_date)
movie$homepage
movie$homepage == "No homepage link available at the moment."
movie$homepage[movie$homepage == "No homepage link available at the moment."]
movie$homepage[movie$homepage == "No homepage link available at the moment."] = "./nohomepage.html"
View(movie)
View(movie)
# give the periods values
movie[which(movie$release_date >= as.Date('1910-01-01') & movie$release_date < as.Date('1979-12-31')),]$periodes = '1910-1980'
movie[which(movie$release_date >= as.Date('1980-01-01') & movie$release_date < as.Date('1989-12-31')),]$periodes = '1980-1990'
movie[which(movie$release_date >= as.Date('1990-01-01') & movie$release_date < as.Date('2099-12-31')),]$periodes = '1990-2000'
movie[which(movie$release_date >= as.Date('2000-01-01') & movie$release_date < as.Date('2009-12-31')),]$periodes = '2000-2010'
movie[which(movie$release_date >= as.Date('2010-01-01') & movie$release_date < as.Date('2017-06-01')),]$periodes = '2010-2017'
# check the unique values
unique(movie$periodes)
top_pop_peri <- data_frame()
# get the top popularity film of each period
for (i in unique(movie$periodes)){
print(i)
top_pop_peri <- rbind(top_pop_peri, movie[movie$popularity == max(movie[which(movie$periodes == i),]$popularity),])
}
movie %>%
group_by(periodes) %>%
sum(movie$History)
movierank <- movie[,c(2:3,5:13,15:17,36:37, 39)]
movierank$budget <- movierank$budget/1000000
movierank$revenue <- movierank$revenue/1000000
#names(movierank)[1] <-"budget(million)"
#names(movierank)[9] <-"revenue(million)"
#names(movierank)[10] <- "runtime(min)"
names(movierank)
class(movierank$popularity)
write.csv(movierank,"movierank.csv")
top_pop_peri[1,]
data <- movierank[,c(1:3,5:13, 15:16)]
data <- data[order(-data$budget),]
data <- data[c(1:300),]
write.csv(data,"scatter.csv")
View(top_pop_peri)
View(movierank)
View(top_pop_peri)
View(data)
# Load packages
library(ggplot2) # visualization
library(scales) # visualization
library(dplyr) # data manipulation
library(visdat)
# read data
movie <- read.csv('movie_final.csv')
# create a column to store periode and set the defual value to 0s
movie$periodes <- rep(0)
# change all value to date type
movie$release_date <- as.Date(movie$release_date)
movie$homepage[movie$homepage == "No homepage link available at the moment."] = "./nohomepage.html"
# give the periods values
movie[which(movie$release_date >= as.Date('1910-01-01') & movie$release_date < as.Date('1979-12-31')),]$periodes = '1910-1980'
movie[which(movie$release_date >= as.Date('1980-01-01') & movie$release_date < as.Date('1989-12-31')),]$periodes = '1980-1990'
movie[which(movie$release_date >= as.Date('1990-01-01') & movie$release_date < as.Date('2099-12-31')),]$periodes = '1990-2000'
movie[which(movie$release_date >= as.Date('2000-01-01') & movie$release_date < as.Date('2009-12-31')),]$periodes = '2000-2010'
movie[which(movie$release_date >= as.Date('2010-01-01') & movie$release_date < as.Date('2017-06-01')),]$periodes = '2010-2017'
# check the unique values
unique(movie$periodes)
top_pop_peri <- data_frame()
# Load packages
library(ggplot2) # visualization
View(movie)
